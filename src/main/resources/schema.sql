CREATE TABLE cat
(
    ID              BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL UNIQUE,
    NAME            VARCHAR(32)                                         NOT NULL,
    DATE_OF_BIRTH   TIMESTAMP WITH TIME ZONE DEFAULT NULL,
    OWNER           VARCHAR(50)                                         NOT NULL,
    PROFILE_PICTURE BINARY LARGE OBJECT DEFAULT NULL,
    BIO             VARCHAR(1024)            DEFAULT '',
    IS_ALIVE        BOOLEAN                                             NOT NULL
);

CREATE TABLE USERS
(
    username VARCHAR(50)  NOT NULL PRIMARY KEY,
    password VARCHAR(500) NOT NULL,
    enabled  BOOLEAN      NOT NULL
);

CREATE TABLE authorities
(
    username  VARCHAR(50) NOT NULL,
    authority VARCHAR(50) NOT NULL,
    CONSTRAINT fk_authorities_users FOREIGN KEY (username) REFERENCES USERS (username)
);

CREATE UNIQUE INDEX ix_auth_username ON authorities (username, authority);
-- I know this is ugly and memory inefficient, having 2 tables for users, but, I wanted to store all those extra things, and I was using an InMemoryUserDetailsManager,
-- and I wanted to switch to a JdbcUserDetailsManager, but I just couldnt get it to work with more values in one table; it isn't meant for that anyway.
-- I could not find any resources on how to make a custom details manager that does what I want(has test users, stored in db, can be accessed for purposes other than authentication) and works,
-- If you know how please contact me, discord is legoaggelos.
CREATE TABLE CAT_PLACE_USER
(
    DISPLAY_NAME    VARCHAR(50)        NOT NULL,
    username        VARCHAR(50) UNIQUE NOT NULL PRIMARY KEY,
    BIO             VARCHAR(1024) DEFAULT '',
    PROFILE_PICTURE BINARY LARGE OBJECT DEFAULT NULL,
    EMAIL           VARCHAR(50)   DEFAULT NULL,
    LIKED_POSTS     LONG ARRAY   DEFAULT NULL,
    LIKED_COMMENTS  LONG ARRAY   DEFAULT NULL,
    LIKED_REPLIES   LONG ARRAY   DEFAULT NULL,
    IS_ADMIN        BOOLEAN       DEFAULT FALSE
);

CREATE TABLE POST
(
    ID          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL UNIQUE,
    IMAGE      BINARY LARGE OBJECT NOT NULL,
    LIKE_COUNT  BIGINT                                                       DEFAULT 0,
    CAT_OWNER   BIGINT                                              NOT NULL,
    USER_OWNER  VARCHAR(50)                                         NOT NULL,
    DESC        VARCHAR(4096)                                       NOT NULL DEFAULT '',
    UPLOAD_DATE TIMESTAMP WITH TIME ZONE NOT NULL,
    IS_APPROVED BOOLEAN DEFAULT UNKNOWN
);

INSERT INTO CAT_PLACE_USER(DISPLAY_NAME, USERNAME, BIO, PROFILE_PICTURE, EMAIL, IS_ADMIN)
VALUES ('paul', 'paul', 'Owner of cats', NULL, 'example@gmail.com', FALSE);
INSERT INTO CAT_PLACE_USER(DISPLAY_NAME, USERNAME, BIO, PROFILE_PICTURE, EMAIL, IS_ADMIN)
VALUES ('legoaggelos', 'legoaggelos', 'Owner of site', NULL, 'legoangel2010@gmail.com', TRUE);

CREATE TABLE COMMENT (
    ID  BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL UNIQUE,
    CONTENT VARCHAR(1024) NOT NULL,
    LIKE_COUNT BIGINT DEFAULT 0,
    POST_ID BIGINT NOT NULL,
    POSTER VARCHAR(50) NOT NULL, --the one who posted the comment
    POST_POSTER VARCHAR(50) NOT NULL, --the one who posted the post the comment belongs in
    POST_CAT_POSTER BIGINT NOT NULL, --the cat who posted the post the comment belongs in
    POST_TIME TIMESTAMP WITH TIME ZONE NOT NULL,
    REPLYING_TO BIGINT DEFAULT NULL --null = not a reply!
);